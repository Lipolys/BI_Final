# -*- coding: utf-8 -*-
"""TrabalhoVendas_LuisPierre_LuisFelipe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-plQInYE1qzPQi0a7F98oSPxudhHgjN2
"""

#Top 10 produtos mais vendidos
import pandas as pd
import matplotlib.pyplot as plt

# Carregar o arquivo CSV
# O separador do arquivo é ponto e vírgula (;)
df = pd.read_csv('produtos_vendidos.csv', delimiter=';')

# Como o arquivo não possui uma coluna 'produto', o código identifica
# a coluna 'produto_nome' como a coluna que contém os nomes dos produtos.
# Em seguida, ele conta a frequência de cada produto e seleciona os 10 maiores.
top_10_produtos = df['produto_nome'].value_counts().nlargest(10)

# Criar o gráfico de barras horizontais
plt.figure(figsize=(12, 8))
top_10_produtos.sort_values(ascending=True).plot(kind='barh', color='skyblue')

# Adicionar títulos e rótulos para maior clareza
plt.title('Top 10 Produtos Mais Vendidos')
plt.xlabel('Quantidade Vendida')
plt.ylabel('Produto')

# Ajustar o layout para garantir que os rótulos sejam exibidos corretamente
plt.tight_layout()

# Salvar o gráfico em um arquivo de imagem
plt.savefig('top_10_produtos.png')

print("Gráfico gerado e salvo como 'top_10_produtos.png'")

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker

# Carregar o arquivo CSV
try:
    df = pd.read_csv('produtos_vendidos.csv', delimiter=';')
except FileNotFoundError:
    print("O arquivo 'produtos_vendidos.csv' não foi encontrado.")
    exit()

# --- Limpeza e Preparação dos Dados ---
# Colunas que precisam de conversão para tipo numérico
cols_to_convert = ['valor_unitario', 'quantidade_vendida', 'produto_custo']

# Verificar se as colunas existem antes de prosseguir
for col in cols_to_convert:
    if col not in df.columns:
        print(f"Erro: A coluna necessária '{col}' não foi encontrada no arquivo.")
        exit()

# Substituir vírgulas por pontos e converter para numérico
for col in cols_to_convert:
    # Garantir que a coluna seja do tipo string antes de usar .str
    df[col] = df[col].astype(str).str.replace(',', '.', regex=False)
    # Converter para numérico, transformando erros em 'Not a Number' (NaN)
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Remover linhas onde a conversão resultou em NaN para colunas essenciais
df.dropna(subset=cols_to_convert, inplace=True)

# --- Cálculo do Lucro ---
# Calcular o lucro por item vendido
df['lucro_por_item'] = df['valor_unitario'] - df['produto_custo']

# Calcular o lucro total para a transação (lucro por item * quantidade)
df['lucro_total_transacao'] = df['lucro_por_item'] * df['quantidade_vendida']

# --- Agregação e Análise ---
# Agrupar por nome do produto e somar o lucro total
lucro_por_produto = df.groupby('produto_nome')['lucro_total_transacao'].sum()

# Selecionar os 10 produtos mais lucrativos
top_10_lucro = lucro_por_produto.nlargest(10)

# --- Geração do Gráfico ---
plt.figure(figsize=(12, 8))
bars = top_10_lucro.sort_values(ascending=True).plot(kind='barh', color='lightgreen')

# Adicionar títulos e rótulos
plt.title('Top 10 Produtos por Lucro Total')
plt.xlabel('Lucro Total (R$)')
plt.ylabel('Produto')

# Formatar o eixo X para exibir valores monetários
formatter = mticker.FuncFormatter(lambda x, p: f'R$ {x:,.2f}'.replace(',', 'X').replace('.', ',').replace('X', '.'))
plt.gca().xaxis.set_major_formatter(formatter)

# Adicionar rótulos de dados nas barras
for bar in bars.patches:
    plt.text(bar.get_width(), bar.get_y() + bar.get_height()/2,
             f' R$ {bar.get_width():,.2f}'.replace(',', 'X').replace('.', ',').replace('X', '.'),
             va='center')

# Ajustar o layout e salvar o gráfico
plt.tight_layout()
plt.savefig('lucro_total_por_produto.png')

print("Gráfico de lucro por produto gerado e salvo como 'lucro_total_por_produto.png'")
print("\nTop 10 Produtos por Lucro Total:")
print(top_10_lucro)

'''
O lucro foi calculado usando as colunas valor_unitario e produto_custo e multiplicado pela quantidade_vendida.
'''

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker

# --- Carregamento dos Dados ---
try:
    df = pd.read_csv('produtos_vendidos.csv', delimiter=';')
except FileNotFoundError:
    print("O arquivo 'produtos_vendidos.csv' não foi encontrado.")
    exit()

# --- Limpeza e Preparação dos Dados ---
# Colunas que precisam ser convertidas para o tipo numérico
cols_to_convert = ['valor_unitario', 'quantidade_vendida']

# Verificar a existência das colunas necessárias
for col in cols_to_convert:
    if col not in df.columns:
        print(f"Erro: A coluna necessária '{col}' não foi encontrada no arquivo.")
        exit()

# Realizar a limpeza e conversão das colunas
for col in cols_to_convert:
    # Assegurar que a coluna é do tipo string para usar o método .str
    df[col] = df[col].astype(str).str.replace(',', '.', regex=False)
    # Converter para numérico, tratando erros
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Remover linhas com valores nulos que possam ter surgido da conversão
df.dropna(subset=cols_to_convert, inplace=True)


# --- Cálculo da Receita ---
# A receita é o valor unitário multiplicado pela quantidade vendida.
# Descontos não foram subtraídos para representar a receita bruta.
df['receita_transacao'] = df['valor_unitario'] * df['quantidade_vendida']


# --- Agregação e Análise ---
# Agrupar por nome do produto e somar a receita total
receita_por_produto = df.groupby('produto_nome')['receita_transacao'].sum()

# Selecionar os 10 produtos com maior receita
top_10_receita = receita_por_produto.nlargest(10)


# --- Geração do Gráfico ---
plt.figure(figsize=(12, 8))
bars = top_10_receita.sort_values(ascending=True).plot(kind='barh', color='cornflowerblue')

# Adicionar títulos e rótulos
plt.title('Top 10 Produtos por Receita Total')
plt.xlabel('Receita Total (R$)')
plt.ylabel('Produto')

# Formatar o eixo X para o formato monetário brasileiro
formatter = mticker.FuncFormatter(lambda x, p: f'R$ {x:,.2f}'.replace(',', 'X').replace('.', ',').replace('X', '.'))
plt.gca().xaxis.set_major_formatter(formatter)

# Adicionar os rótulos de dados (valores) em cada barra
for bar in bars.patches:
    plt.text(bar.get_width(), bar.get_y() + bar.get_height()/2,
             f' R$ {bar.get_width():,.2f}'.replace(',', 'X').replace('.', ',').replace('X', '.'),
             va='center', ha='left')

# Ajustar o layout para garantir que tudo seja exibido corretamente e salvar
plt.tight_layout()
plt.savefig('receita_total_por_produto.png')


# --- Exibição dos Resultados ---
print("Gráfico de receita por produto gerado e salvo como 'receita_total_por_produto.png'")
print("\nTop 10 Produtos por Receita Total:")
print(top_10_receita)

'''
A receita foi calculada multiplicando o valor_unitario pela quantidade_vendida de cada transação, representando a receita bruta.
'''

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker

# --- Carregamento dos Dados ---
try:
    df = pd.read_csv('produtos_vendidos.csv', delimiter=';')
except FileNotFoundError:
    print("O arquivo 'produtos_vendidos.csv' não foi encontrado.")
    exit()

# --- Limpeza e Preparação dos Dados ---
# Colunas que precisam ser convertidas para o tipo numérico
# Incluindo 'produto_preco', que é o preço padrão do produto
cols_to_convert = ['produto_preco', 'produto_custo', 'quantidade_vendida']

# Verificar a existência das colunas necessárias
for col in cols_to_convert:
    if col not in df.columns:
        print(f"Erro: A coluna necessária '{col}' não foi encontrada no arquivo.")
        exit()

# Realizar a limpeza e conversão das colunas
for col in cols_to_convert:
    # Assegurar que a coluna é do tipo string para usar o método .str
    df[col] = df[col].astype(str).str.replace(',', '.', regex=False)
    # Converter para numérico, tratando erros
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Remover linhas com valores nulos que possam ter surgido da conversão
# Isso garante a integridade dos cálculos
df.dropna(subset=cols_to_convert, inplace=True)


# --- Cálculo do Lucro Estimado ---
# O Lucro Estimado é calculado usando o 'produto_preco' (preço padrão de venda),
# em vez do 'valor_unitario' (preço real da venda, que pode ter descontos).
# Fórmula: (Preço Padrão - Custo) * Quantidade
df['lucro_estimado_transacao'] = (df['produto_preco'] - df['produto_custo']) * df['quantidade_vendida']


# --- Agregação e Análise ---
# Agrupar por nome do produto e somar o lucro estimado total
lucro_estimado_por_produto = df.groupby('produto_nome')['lucro_estimado_transacao'].sum()

# Embora o cálculo seja para todos os produtos, vamos visualizar os 10 maiores
# para que o gráfico seja legível.
top_10_lucro_estimado = lucro_estimado_por_produto.nlargest(10)


# --- Geração do Gráfico ---
plt.figure(figsize=(12, 8))
bars = top_10_lucro_estimado.sort_values(ascending=True).plot(kind='barh', color='darkorange')

# Adicionar títulos e rótulos
plt.title('Top 10 Produtos por Lucro Estimado Total')
plt.xlabel('Lucro Estimado (R$) - (Baseado no Preço Padrão)')
plt.ylabel('Produto')

# Formatar o eixo X para o formato monetário brasileiro
formatter = mticker.FuncFormatter(lambda x, p: f'R$ {x:,.2f}'.replace(',', 'X').replace('.', ',').replace('X', '.'))
plt.gca().xaxis.set_major_formatter(formatter)

# Adicionar os rótulos de dados (valores) em cada barra
for bar in bars.patches:
    plt.text(bar.get_width(), bar.get_y() + bar.get_height()/2,
             f' R$ {bar.get_width():,.2f}'.replace(',', 'X').replace('.', ',').replace('X', '.'),
             va='center', ha='left')

# Ajustar o layout para garantir que tudo seja exibido corretamente e salvar
plt.tight_layout()
plt.savefig('lucro_estimado_por_produto.png')


# --- Exibição dos Resultados ---
print("Gráfico de lucro estimado por produto gerado e salvo como 'lucro_estimado_por_produto.png'")
print("\nTop 10 Produtos por Lucro Estimado Total (Baseado no Preço Padrão):")
print(top_10_lucro_estimado)


'''
Para este cálculo, interpretei o "Lucro Estimado" como o lucro que seria obtido se todos os produtos fossem vendidos pelo seu preço padrão (produto_preco),
em vez do preço que foi efetivamente praticado na venda (valor_unitario, que pode incluir descontos).
'''

#Clientes homens e mulheres
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# --- Carregamento dos Dados ---
try:
    df_clientes = pd.read_csv('clientes.csv', delimiter=';')
except FileNotFoundError:
    print("O arquivo 'clientes.csv' não foi encontrado.")
    exit()

# --- Etapa de Limpeza e Padronização dos Nomes das Colunas ---
# Para resolver problemas de maiúsculas/minúsculas e espaços,
# padronizamos todos os nomes de colunas para minúsculas e sem espaços.
df_clientes.columns = df_clientes.columns.str.strip().str.lower()

# --- Gráfico 1: Distribuição de Clientes por Sexo ---
print("Gerando gráfico de distribuição por sexo...")
try:
    # Contar a frequência de cada sexo
    contagem_sexo = df_clientes['genero'].value_counts()

    # Criar o gráfico de barras
    plt.figure(figsize=(8, 6))
    bars = plt.bar(contagem_sexo.index, contagem_sexo.values, color=['#FFC0CB', '#ADD8E6'])
    plt.title('Distribuição de Clientes por Sexo')
    plt.xlabel('Sexo')
    plt.ylabel('Quantidade de Clientes')
    # Renomeia os rótulos do eixo X para serem mais descritivos
    plt.xticks(ticks=contagem_sexo.index, labels=['Feminino', 'Masculino'])

    # Adicionar o número exato em cima de cada barra
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2.0, yval, int(yval), va='bottom', ha='center')

    # Salvar o gráfico
    plt.tight_layout()
    plt.savefig('distribuicao_sexo.png')
    print("Gráfico 'distribuicao_sexo.png' salvo com sucesso.")

except KeyError:
    print("Erro: A coluna 'sexo' não foi encontrada, não foi possível gerar o gráfico de sexo.")
except Exception as e:
    print(f"Ocorreu um erro ao gerar o gráfico de sexo: {e}")

#Idade clientes

import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# --- Carregamento dos Dados ---
try:
    df_clientes = pd.read_csv('clientes.csv', delimiter=';')
except FileNotFoundError:
    print("O arquivo 'clientes.csv' não foi encontrado.")
    exit()


print("\nGerando gráfico de distribuição por idade...")
if 'data_nascimento' not in df_clientes.columns:
    print("Erro: A coluna 'data_nascimento' não foi encontrada, não foi possível gerar o gráfico de idade.")
else:
    # Calcular a idade
    data_atual = datetime(2025, 6, 23)
    df_clientes['data_nascimento_dt'] = pd.to_datetime(df_clientes['data_nascimento'], errors='coerce')
    df_clientes.dropna(subset=['data_nascimento_dt'], inplace=True)
    df_clientes['idade'] = ((data_atual - df_clientes['data_nascimento_dt']).dt.days / 365.25).astype(int)

    # Criar o histograma
    plt.figure(figsize=(12, 7))
    # Define os "bins" (barras) do histograma em intervalos de 5 anos
    plt.hist(df_clientes['idade'], bins=range(0, df_clientes['idade'].max() + 5, 5), color='skyblue', edgecolor='black')

    # Destacar a faixa de idade "próxima dos 30" (28 a 32 anos) com uma área amarela
    plt.axvspan(28, 32, color='yellow', alpha=0.5, label='Próximos de 30 anos (28-32)')

    plt.title('Distribuição de Clientes por Idade')
    plt.xlabel('Idade')
    plt.ylabel('Quantidade de Clientes')
    plt.grid(axis='y', alpha=0.75)
    plt.legend()

    # Salvar o gráfico
    plt.tight_layout()
    plt.savefig('distribuicao_idade.png')
    print("Gráfico 'distribuicao_idade.png' salvo com sucesso.")